
n = 32;
W = Wilkinson(n);
x = randn(n,1);
b = W*x;
fprintf("Conditional number is \n");
disp(cond(W,inf));
x1 = geppsolve(W,b);
forward_err = norm(x - x1,inf)/norm(x,inf);
residual_err = norm(W*x1 - b,inf)/norm(b,inf);
fprintf("Using gepp method\n");
fprintf("Forward error is ");
disp(forward_err);
fprintf("Residual error is ");
disp(residual_err);
[Q, R] = qr(W);
x2 = colbackward(R,Q'*b);
forward_err = norm(x - x2,inf)/norm(x,inf);
residual_err = norm(W*x2 - b,inf)/norm(b,inf);
fprintf("Using QR method\n");
fprintf("Forward error is ");
disp(forward_err);
fprintf("Residual error is ");
disp(residual_err);

n = 64;
W = Wilkinson(n);
x = randn(n,1);
b = W*x;
fprintf("Conditional number is \n");
disp(cond(W,inf));
x1 = geppsolve(W,b);
forward_err = norm(x - x1,inf)/norm(x,inf);
residual_err = norm(W*x1 - b,inf)/norm(b,inf);
fprintf("Using gepp method\n");
fprintf("Forward error is ");
disp(forward_err);
fprintf("Residual error is ");
disp(residual_err);
[Q, R] = qr(W);
x2 = colbackward(R,Q'*b);
forward_err = norm(x - x2,inf)/norm(x,inf);
residual_err = norm(W*x2 - b,inf)/norm(b,inf);
fprintf("Using QR method\n");
fprintf("Forward error is ");
disp(forward_err);
fprintf("Residual error is ");
disp(residual_err);